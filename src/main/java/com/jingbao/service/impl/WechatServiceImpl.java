package com.jingbao.service.impl;import com.alibaba.fastjson.JSON;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.jingbao.auto.DateUtil;import com.jingbao.config.Config;import com.jingbao.entity.basic.ServiceResult;import com.jingbao.entity.basic.WechatPayVo;import com.jingbao.entity.model.DopayInfo;import com.jingbao.entity.model.DoregInfo;import com.jingbao.service.DopayInfoService;import com.jingbao.service.DoregInfoService;import com.jingbao.service.IWechatService;import com.jingbao.util.*;import com.jingbao.weixin.Utils.*;import com.jingbao.weixin.Utils.HttpXmlUtils;import com.jingbao.weixin.entity.Unifiedorder;import com.jingbao.weixin.entity.UnifiedorderResult;import com.jingbao.weixin.entity.WXAppPay;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.web.bind.annotation.RequestParam;import java.math.BigDecimal;import java.util.HashMap;import java.util.Map;import java.util.SortedMap;import java.util.TreeMap;import static com.jingbao.config.Config.refundURL;/** * @author likanghong * @version 1.0.0 * @Date 2018-09-10 16:12:18 * @since */@Servicepublic class WechatServiceImpl implements IWechatService {    private static final Logger logger = LoggerFactory.getLogger(WechatServiceImpl.class);    @Autowired    private DopayInfoService dopayInfoService;    @Autowired    private DoregInfoService doregInfoService;    @Override    public ServiceResult jsPay(@RequestParam(value = "payAount") String payAount, @RequestParam(value = "openId") String openId,@RequestParam(value="outTradeNo")String outTradeNo) {        logger.info("openId>>>>>>>>>>>>>>>" + openId);        logger.info("PayAount>>>>>>>>>>>>>>>" + payAount);        String body = "廉江市妇幼保健院";        String detail = "订单详情" ;        if(outTradeNo.substring(0,2).equals("RE")){            body = "挂号费用";        }else if (outTradeNo.substring(0,2).equals("DO")){            body = "处方费用";        }else {            body = "住院押金";        }        Unifiedorder un = new Unifiedorder();        un.setAppid(Config.Wx.APP_ID);        un.setMch_id(Config.Wx.MCHID);        un.setNonce_str(RandCharsUtils.getRandomString(18));        un.setBody(body);        un.setDetail(detail);        un.setAttach("myAttach");        un.setOut_trade_no(outTradeNo);        BigDecimal aount = new BigDecimal(payAount);        int newmoney = Integer.parseInt(new java.text.DecimalFormat("0")                .format(aount.doubleValue() * 100));        un.setTotal_fee(newmoney);        un.setSpbill_create_ip("127.0.0.1");        long time = System.currentTimeMillis();        un.setTime_start(DateUtil.parseToString(time, DateUtil.WEIXNTIME));        un.setTime_expire(DateUtil.parseToString(time + 30 * 60 * 1000,                DateUtil.WEIXNTIME));        un.setNotify_url(Config.baseUrl);        un.setTrade_type("JSAPI");        un.setOpenid(openId);        HashMap<String, Object> m = new BeanUtil().beanToMap(un);        SortedMap<String, Object> sort = new TreeMap<String, Object>(m);        String sign = WXSignUtils.createSign("utf-8", sort);        un.setSign(sign);        String unifiedorderxml = HttpXmlUtils.xmlInfoJs(un);        logger.info("unifiedorderxml:" + unifiedorderxml);        String xmlrs = HttpXmlUtils.httpsRequest(Config.unifiedorderURL,                "POST", unifiedorderxml);        logger.info("xmlrs:" + xmlrs);        UnifiedorderResult wrs = JdomParseXmlUtils.getUnifiedorderResult(xmlrs);        if ("SUCCESS".equalsIgnoreCase(wrs.getResult_code())                && "SUCCESS".equalsIgnoreCase(wrs.getResult_code())) {            logger.info("" + wrs);            String prepayid = wrs.getPrepay_id();            String nonce_str = wrs.getNonce_str();            logger.info("统一下单成功" + prepayid);            WXAppPay p = new WXAppPay();            p.setAppId(Config.Wx.APP_ID);            p.setPartnerid(Config.Wx.MCHID);            p.setNonceStr(nonce_str);            p.setTimeStamp(String.valueOf(DateUtil.getNowTimeStamp()));            p.setPrepay_id(prepayid);            p.makeSign();            WechatPayVo wechatPayVo = new WechatPayVo();            wechatPayVo.setAppid(p.getAppId());            wechatPayVo.setPartnerid(p.getPartnerid());            wechatPayVo.setNoncestr(p.getNonceStr());            wechatPayVo.setSign(p.getSign());            wechatPayVo.setTimestamp(p.getTimeStamp());            wechatPayVo.setPrepayid(p.getPrepay_id());            wechatPayVo.setOrderId(outTradeNo);            return new ServiceResult(wechatPayVo);        } else {            return new ServiceResult(1, "统一下单失败(" + wrs.getErr_code_des() + ")");        }    }    //退款    @Override    public Map<String, Object> refund(String transactionId, String refundId) {        logger.info("transactionId>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>9999999999999999999999999" + transactionId);        logger.info("refund_id>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>99999999999999999999999" + refundId);        Map<String,Object> result = new HashMap<String, Object>();        try {            Double refund_fee = Double.parseDouble(refundId);            //退款金额以分为单位            long Amount = new BigDecimal(refund_fee * 100d).longValue();            // 商户系统内部的退款单号，商户系统内部唯一，同一退款单号多次请求只退一笔            String out_refund_no = WeiXinUtil.getOrderNo();        String nonce_str = RandCharsUtils.getRandomString(18);//随机字符串        SortedMap<String, Object> packageParams = new TreeMap<String, Object>();        packageParams.put("appid", Config.Wx.APP_ID);        packageParams.put("mch_id", Config.Wx.MCHID);        packageParams.put("nonce_str", nonce_str);        packageParams.put("out_refund_no", out_refund_no);        packageParams.put("refund_fee", String.valueOf(Amount));        packageParams.put("total_fee",  String.valueOf(Amount));        packageParams.put("transaction_id", transactionId);        String sign= WXSignUtils.createSign("utf-8",packageParams);        packageParams.put("sign",sign);        String xmlInfo = com.jingbao.util.HttpXmlUtils.xmlInfo(packageParams);        logger.info("xmlInfo+++++++++++++++++>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + xmlInfo);            //请求微信退款地址            String refundReturn = ClientCustomSSL.doRefund(refundURL, xmlInfo);            logger.info("refundReturn>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + refundReturn);            Map doXMLParse = null;            String signStr = "";            doXMLParse = com.jingbao.util.HttpXmlUtils.doXMLParse(refundReturn);            if("SUCCESS".equals(doXMLParse.get("return_code"))){                SortedMap<Object, Object> againParameters = new TreeMap<Object, Object>();                againParameters.put("appid", Config.Wx.APP_ID);                againParameters.put("partnerid", Config.Wx.MCHID);                againParameters.put("noncestr", StringUtil.getRandomNum(8));                againParameters.put("timestamp", System.currentTimeMillis() / 1000);                String sign1 = WxSignUtils.createSign("UTF-8", againParameters,Config.Wx.KEY);                againParameters.put("sign", sign1);                signStr = JSON.toJSONString(againParameters);                System.out.println("再次签名结果" + signStr);                result.put("code", "SUCCESS");                result.put("msg", "签名成功");                result.put("data", signStr);                //修改本地支付状态                EntityWrapper<DopayInfo> wntityWrapper = new EntityWrapper<>();                DopayInfo dopayInfo = new DopayInfo();                dopayInfo.setTransactionId(transactionId);                wntityWrapper.setEntity(dopayInfo);                DopayInfo dopayInfoNew = dopayInfoService.selectOne(wntityWrapper);                DopayInfo dopayInfoList = new DopayInfo();                dopayInfoList.setSuccessfulPayment("2");                dopayInfoList.setId(dopayInfoNew.getId());                dopayInfoService.updateById(dopayInfoList);            }else{                result.put("code", "ERROR");                result.put("msg", "签名失败");            }        } catch (Exception e) {            e.printStackTrace();        }        logger.info("=============================================================");        return result;    }    @Override    public String requestDoreg(String dataParam, String api) {        return null;    }}